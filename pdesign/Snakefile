###############################################################################################################
# HiPR-FISH : simulation of probe coverage with different design parameters
###############################################################################################################

import re
import os
import glob
import numpy as np
import pandas as pd
from Bio import Seq
from Bio import SeqIO
from snakemake.io import expand, glob_wildcards

###############################################################################################################
# Helper functions
###############################################################################################################

def get_simulation_summary_filenames(sim_input_filename):
    sim_output_filename = re.sub('.csv', '_results.csv', sim_input_filename)
    return(sim_output_filename)

def get_simulation_list(sim_input_filename, data_dir):
    sim_tab = pd.read_csv(sim_input_filename)
    design_list = sim_tab.DESIGN_ID.tolist()
    return(design_list, sim_tab)

def get_sample_input_fasta_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    input_fasta_filename = '{}/{}/input/{}.fasta' % (data_dir, sample, sample)
    return(input_fasta_filename)

def get_sim_target_rank(sim_tab, design_id):
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    return(target_rank)

def get_sim_mch(sim_tab, design_id):
    mch = sim_tab[sim_tab.DESIGN_ID == design_id].MAX_CONTINUOUS_HOMOLOGY.values[0]
    return(mch)

def get_sim_mintm(sim_tab, design_id):
    mintm = sim_tab[sim_tab.DESIGN_ID == design_id].MIN_TM.values[0]
    return(mintm)

def get_sim_maxtm(sim_tab, design_id):
    maxtm = sim_tab[sim_tab.DESIGN_ID == design_id].MAX_TM.values[0]
    return(maxtm)

def get_sim_gc(sim_tab, design_id):
    gc = sim_tab[sim_tab.DESIGN_ID == design_id].GC.values[0]
    return(gc)

def get_sim_otu(sim_tab, design_id):
    otu = sim_tab[sim_tab.DESIGN_ID == design_id].OTU.values[0]
    return(otu)

def get_sim_na(sim_tab, design_id):
    na = sim_tab[sim_tab.DESIGN_ID == design_id].SODIUM.values[0]
    return(na)

def get_sim_dnac1oligo(sim_tab, design_id):
    dnac1_oligo = sim_tab[sim_tab.DESIGN_ID == design_id].DNACONC.values[0]
    return(dnac1_oligo)

def get_sim_probe_selection_method(sim_tab, design_id):
    probe_selection_method = sim_tab[sim_tab.DESIGN_ID == design_id].PROBE_SELECTION_METHOD.values[0]
    return(probe_selection_method)

def get_sim_tpn(sim_tab, design_id):
    tpn = sim_tab[sim_tab.DESIGN_ID == design_id].TPN.values[0]
    return(tpn)

def get_oriented_fasta_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    oriented_fasta_filename = '{}/{}/input/{}.oriented.fasta'.format(data_dir, sample, sample)
    return(oriented_fasta_filename)

def get_blast_lineage_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    blast_lineage_filename = '{}/{}/utilities/blast_lineage.tab'.format(data_dir, sample, sample)
    return(blast_lineage_filename)

def get_taxon_probe_evaluation_complete_filename(sim_tab, design_id, design_target, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_evaluation_filename = '{}/{}/evaluate/{}/{}_probe_evaluation_complete.txt'.format(data_dir, sample, target_rank, design_target)
    return(probe_evaluation_filename)

def get_taxon_probe_selection_initiation_filename(sim_tab, design_id, design_target, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_selection_initiation_filename = '{}/{}/selection/{}/{}_probe_selection_initiation.txt'.format(data_dir, sample, target_rank, design_target)
    return(probe_selection_initiation_filename)

def get_utilities_directory(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    util_dir = '{}/{}/utilities/'.format(data_dir, sample)
    return(util_dir)

def get_evaluation_directory(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    evaluation_dir = '{}/{}/evaluate/'.format(data_dir, sample)
    return(evaluation_dir)

def get_taxon_probe_evaluation_filename(sim_tab, design_id, taxon, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    taxon_probe_evaluation_filename = '{}/{}/evaluate/{}/{}_probe_evaluation_complete.txt'.format(data_dir, sample, target_rank, taxon)
    return(taxon_probe_evaluation_filename)

def get_taxon_probe_evaluation_dir(sim_tab, design_id, taxon, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    taxon_probe_evaluation_dir = '{}/{}/evaluate/{}/{}'.format(data_dir, sample, target_rank, taxon)
    return(taxon_probe_evaluation_dir)

def get_probe_evaluation_dir(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_evaluation_dir = '{}/{}/evaluate/{}'.format(data_dir, sample, target_rank)
    return(probe_evaluation_dir)

def get_taxon_probe_evaluation_filenames_list(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    taxon_probe_evaluation_filenames_list = '{}/{}/log/{}_probe_evaluation_filenames.csv'.format(data_dir, sample, target_rank)
    return(taxon_probe_evaluation_filenames_list)

def get_probe_evaluation_complete_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_evaluation_complete_filename = '{}/{}/log/{}_probe_evaluation_complete.txt'.format(data_dir, sample, target_rank)
    return(probe_evaluation_complete_filename)

def get_probe_evaluation_primary_complete_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_evaluation_complete_filename = '{}/{}/log/{}_probe_evaluation_primary_complete.txt'.format(data_dir, sample, target_rank)
    return(probe_evaluation_complete_filename)

def get_design_level_evaluation_dir(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    design_level_evaluation_dir = '{}/{}/evaluate/{}'.format(data_dir, sample, target_rank)
    return(design_level_evaluation_dir)

def get_sim_freq_ll(sim_tab, design_id):
    freq_ll = sim_tab[sim_tab.DESIGN_ID == design_id].FREQLL.values[0]
    return(freq_ll)

def get_sim_bot(sim_tab, design_id):
    bot = sim_tab[sim_tab.DESIGN_ID == design_id].BOT.values[0]
    return(bot)

def get_sim_bplc(sim_tab, design_id):
    bplc = sim_tab[sim_tab.DESIGN_ID == design_id].BPLC.values[0]
    return(bplc)

def get_sim_barcode_selection(sim_tab, design_id):
    barcode_selection = sim_tab[sim_tab.DESIGN_ID == design_id].BARCODESELECTION.values[0]
    return(barcode_selection)

def get_sim_probe_selection(sim_tab, design_id):
    selection_method = sim_tab[sim_tab.DESIGN_ID == design_id].PROBE_SELECTION_METHOD.values[0]
    return(selection_method)

def get_sim_primerset(sim_tab, design_id):
    primerset = sim_tab[sim_tab.DESIGN_ID == design_id].PRIMERSET.values[0]
    return(primerset)

def get_sim_theme_color(sim_tab, design_id):
    theme_color = sim_tab[sim_tab.DESIGN_ID == design_id].THEMECOLOR.values[0]
    return(theme_color)

def get_sim_bt(sim_tab, design_id):
    bt = sim_tab[sim_tab.DESIGN_ID == design_id].BITSCORE_THRESH.values[0]
    return(bt)

def get_full_length_sequences_list(sim_tab):
    full_length_sequences_list = []
    for i in range(sim_tab.shape[0]):
        design_id = sim_tab.DESIGN_ID.values[i]
        primerset = sim_tab.PRIMERSET.values[i]
        barcode_selection = sim_tab.BARCODESELECTION.values[i]
        f = data_dir + '/simulation/{}/{}_complex_oligo_pool.txt'.format(design_id, design_id)
        full_length_sequences_list.append(f)
    return(full_length_sequences_list)

def get_blast_database(sample, data_dir):
    blast_db = '{}/{}/input/{}.oriented.fasta'.format(data_dir, sample, sample)
    return(blast_db)

def get_blast_database_by_design_id(sam_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    blast_db = data_dir + '/{}/input/{}.oriented.fasta'.format(sample, sample)
    return(blast_db)

def get_probes_dir(data_dir, sample):
    return('{}/{}/probes'.format(data_dir, sample))

def get_design_level(design_level):
    return(design_level)

data_dir = config['__default__']['DATA_DIR']
sim_input_filename = config['simulations']['simulation_table']
n_workers = config['__default__']['N_WORKERS']
theme_color = config['plotting']['theme_color']
pipeline_version = os.path.basename(config['__default__']['SCRIPTS_PATH'])
sim_output_filename = get_simulation_summary_filenames(sim_input_filename)
design_list, sim_tab = get_simulation_list(sim_input_filename, data_dir)
full_length_sequences_list = get_full_length_sequences_list(sim_tab)
design_dir = ['{}/simulation/{}'.format(data_dir, dsgn) for dsgn in design_list]
for dsgn_dir in design_dir:
    if not os.path.exists(dsgn_dir):
        os.makedirs(dsgn_dir)

###############################################################################################################
# Snake rules
###############################################################################################################

rule all:
    input:
        sim_output_filename

rule initialize_probe_design:
    input:
        fasta_filename = data_dir + '/{sample}/input/{sample}.fasta',
        sample_dir = data_dir + '/{sample}'
    output:
        probe_design_initialization_complete_filename = data_dir + '/{sample}/log/probe_design_initialization_complete.txt'
    threads: 1
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_initialize_probe_design.py "
        "{input.fasta_filename} {input.sample_dir} "
        "-db {config[blast][16s_db]} "

rule design_probes:
    input:
        probe_design_initialization_complete_filename = data_dir + '/{sample}/log/probe_design_initialization_complete.txt'
    output:
        probe_design_complete_filename = data_dir + '/{sample}/log/probe_design_complete.txt'
    threads: 1
    params:
        primer3_dir = data_dir + '/{sample}/primer3',
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_design_probes.py "
        "{params.primer3_dir} -n_workers {params.n_workers}"

rule combine_probes:
    input:
        probe_design_complete_filename = data_dir + '/{sample}/log/probe_design_complete.txt'
    output:
        data_dir + '/{sample}/probes_summary/probes_summary.h5'
    params:
        probes_summary_dir = data_dir + '/{sample}/probes_summary',
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_combine_probes.py {params.probes_summary_dir} -n {params.n_workers}"

rule write_probes:
    input:
        probe_summary_filename = data_dir + '/{sample}/probes_summary/probes_summary.h5'
    output:
        probes_write_complete_filename = data_dir + '/{sample}/probes/probes_write_complete.txt'
    params:
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_write_probes.py {input.probe_summary_filename} -n {params.n_workers}"

# rule blast_probes:
#     input:
#         probes_write_complete_filename = data_dir + '/{sample}/probes/probes_write_complete.txt'
#     output:
#         probes_blast_complete_filename = data_dir + '/{sample}/probes/{design_level}/{design_level}_probes_blast_complete.txt'
#     params:
#         design_level_dir = data_dir + '/{sample}/probes/{design_level}',
#         blast_database = lambda wildcards: get_blast_database(wildcards.sample, data_dir),
#         n_workers = n_workers
#     shell:
#         "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_blast_probes.py "
#         "{params.design_level_dir} {params.blast_database} -n {params.n_workers}"

rule evaluate_probes_primary:
    input:
        probes_write_complete_filename = data_dir + '/{sample}/probes/probes_write_complete.txt'
    output:
        data_dir + '/{sample}/log/{design_level}_probe_evaluation_primary_complete.txt'
    params:
        probes_dir = lambda wildcards: get_probes_dir(data_dir, wildcards.sample),
        design_level = lambda wildcards: get_design_level(wildcards.design_level),
        blast_database = lambda wildcards: get_blast_database(wildcards.sample, data_dir),
        design_level_dir = data_dir + '/{sample}/probes/{design_level}',
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_evaluate_probes_primary.py "
        "{input.probes_write_complete_filename} {params.blast_database} "
        "-d {params.design_level_dir} -n {params.n_workers}"

rule evaluate_probes_secondary:
    input:
        probe_evaluation_complete_filename = lambda wildcards: get_probe_evaluation_primary_complete_filename(sim_tab, wildcards.design_id, data_dir)
    output:
        probe_selection_complete_filename = data_dir + '/simulation/{design_id}/probe_evaluation_secondary_complete.txt'
    threads: 1
    params:
        design_dir = data_dir + '/simulation/{design_id}',
        design_level_evaluation_dir = lambda wildcards: get_design_level_evaluation_dir(sim_tab, wildcards.design_id, data_dir),
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id),
        probe_selection_method = lambda wildcards: get_sim_probe_selection_method(sim_tab, wildcards.design_id),
        target_rank = lambda wildcards: get_sim_target_rank(sim_tab, wildcards.design_id),
        min_tm = lambda wildcards: get_sim_mintm(sim_tab, wildcards.design_id),
        max_tm = lambda wildcards: get_sim_maxtm(sim_tab, wildcards.design_id),
        gc = lambda wildcards: get_sim_gc(sim_tab, wildcards.design_id),
        mch = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id),
        bt = lambda wildcards: get_sim_bt(sim_tab, wildcards.design_id),
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_evaluate_probes_secondary.py "
        "{params.design_level_evaluation_dir} {wildcards.design_id} {params.design_dir} "
        "-n_workers {params.n_workers} "
        "-t {params.target_rank} "
        "-tmin {params.min_tm} "
        "-tmax {params.max_tm} "
        "-m {params.mch} "
        "-gc {params.gc} "
        "-bot {params.bot} "
        "-bt {params.bt}"

rule select_taxon_probes:
    input:
        probe_evaluation_complete_filename = data_dir + '/simulation/{design_id}/probe_evaluation_secondary_complete.txt'
    output:
        probe_selection_complete_filename = data_dir + '/simulation/{design_id}/{design_id}_probe_selection_complete.txt'
    threads: 1
    params:
        design_dir = data_dir + '/simulation/{design_id}',
        design_level_evaluation_dir = lambda wildcards: get_design_level_evaluation_dir(sim_tab, wildcards.design_id, data_dir),
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id),
        probe_selection_method = lambda wildcards: get_sim_probe_selection_method(sim_tab, wildcards.design_id),
        target_rank = lambda wildcards: get_sim_target_rank(sim_tab, wildcards.design_id),
        min_tm = lambda wildcards: get_sim_mintm(sim_tab, wildcards.design_id),
        max_tm = lambda wildcards: get_sim_maxtm(sim_tab, wildcards.design_id),
        gc = lambda wildcards: get_sim_gc(sim_tab, wildcards.design_id),
        mch = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id),
        bt = lambda wildcards: get_sim_bt(sim_tab, wildcards.design_id),
        n_workers = n_workers
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_select_probes.py "
        "{params.design_level_evaluation_dir} {wildcards.design_id} {params.design_dir} "
        "-n_workers {params.n_workers} "
        "-t {params.target_rank} "
        "-tmin {params.min_tm} "
        "-tmax {params.max_tm} "
        "-m {params.mch} "
        "-gc {params.gc} "
        "-bot {params.bot} "
        "-bt {params.bt}"

rule add_spacers:
    input:
        probe_selection_complete_filename = data_dir + '/simulation/{design_id}/{design_id}_probe_selection_complete.txt'
    output:
        probe_spacer_addition_complete_filename = data_dir + '/simulation/{design_id}/{design_id}_probe_spacer_addition_complete.txt'
    params:
        n_workers = n_workers,
        design_dir = data_dir + '/simulation/{design_id}',
        probe_evaluation_dir = lambda wildcards: get_probe_evaluation_dir(sim_tab, wildcards.design_id, data_dir),
        oriented_fasta_filename = lambda wildcards: get_oriented_fasta_filename(sim_tab, wildcards.design_id, data_dir),
        blast_lineage_filename = lambda wildcards: get_blast_lineage_filename(sim_tab, wildcards.design_id, data_dir),
        max_continuous_homology = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_add_spacers.py "
        "{params.design_dir} "
        "-n_workers {params.n_workers} "
        "-per {params.probe_evaluation_dir} "
        "-off {params.oriented_fasta_filename} "
        "-blf {params.blast_lineage_filename} "
        "-mch {params.max_continuous_homology}"

rule collect_selected_probe_information:
    input:
        probe_spacer_addition_complete_filename = data_dir + '/simulation/{design_id}/{design_id}_probe_spacer_addition_complete.txt',
        sim_filename = sim_input_filename,
        design_directory = data_dir + '/simulation/{design_id}',
    output:
        taxon_best_probes_filtered_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_filtered.csv',
        probes_summary_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_summary.csv'
    threads: 1
    params:
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_collect_taxon_best_probes.py "
        "{input.design_directory} {input.sim_filename} "
        "{output.taxon_best_probes_filtered_filename} {output.probes_summary_filename} {params.bot}"

rule generate_full_probes:
    input:
        taxon_best_probes_filtered_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_filtered.csv',
    output:
        full_length_probes_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_sequences.txt',
        full_length_blocking_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_blocking_probes_sequences.txt',
        full_length_helper_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_helper_probes_sequences.txt',
        full_length_probe_summary_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_summary.txt'
    threads: 1
    params:
        n_workers = n_workers,
        design_dir = data_dir + '/simulation/{design_id}',
        utilities_directory = lambda wildcards: get_utilities_directory(sim_tab, wildcards.design_id, data_dir),
        evaluation_directory = lambda wildcards: get_evaluation_directory(sim_tab, wildcards.design_id, data_dir),
        blast_database = lambda wildcards: get_blast_database_by_design_id(sim_tab, wildcards.design_id, data_dir),
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id),
        mch = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id),
        bplc = lambda wildcards: get_sim_bplc(sim_tab, wildcards.design_id),
        primerset = lambda wildcards: get_sim_primerset(sim_tab, wildcards.design_id),
        target_rank = lambda wildcards: get_sim_target_rank(sim_tab, wildcards.design_id),
        selection_method = lambda wildcards: get_sim_probe_selection(sim_tab, wildcards.design_id),
        barcode_selection = lambda wildcards: get_sim_barcode_selection(sim_tab, wildcards.design_id),
        theme_color = lambda wildcards: get_sim_theme_color(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_generate_full_probes.py "
        "{params.design_dir} {params.utilities_directory} {params.evaluation_directory} {params.blast_database} "
        "{params.bot} {params.mch} {params.bplc} "
        "-ps {params.primerset} "
        "-t {params.target_rank} "
        "-sm {params.selection_method} "
        "-bs {params.barcode_selection} "
        "-tc {params.theme_color} "
        "-n_workers {params.n_workers}"

rule combine_full_length_sequences:
    input:
        full_length_probes_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_sequences.txt',
        full_length_blocking_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_blocking_probes_sequences.txt',
        full_length_helper_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_helper_probes_sequences.txt'
    output:
        complex_oligo_pool_sequences = data_dir + '/simulation/{design_id}/{design_id}_complex_oligo_pool.txt'
    shell:
        "cat "
        "{input.full_length_probes_filename} "
        "{input.full_length_blocking_probes_filename} "
        "{input.full_length_helper_probes_filename} "
        "> {output.complex_oligo_pool_sequences}"

rule collect_probe_coverage_results:
    input:
        full_length_sequences_list,
        sim_input_filename = sim_input_filename,
        data_dir = data_dir
    output:
        sim_output_filename
    params:
        pipeline_version = pipeline_version,
        theme_color = theme_color
    threads: 1
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_collect_simulation_results.py "
        "{input.data_dir} {input.sim_input_filename} {params.pipeline_version} {params.theme_color} {output}"
